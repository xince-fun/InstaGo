// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/xince-fun/InstaGo/server/services/user/app"
	"github.com/xince-fun/InstaGo/server/services/user/infra/cache"
	"github.com/xince-fun/InstaGo/server/services/user/infra/persistence"
	"github.com/xince-fun/InstaGo/server/services/user/infra/persistence/dal"
	"github.com/xince-fun/InstaGo/server/services/user/infra/sal"
	"github.com/xince-fun/InstaGo/server/services/user/pkg/initialize"
	"github.com/xince-fun/InstaGo/server/services/user/pkg/md5"
	"github.com/xince-fun/InstaGo/server/services/user/pkg/paseto"
)

// Injectors from wire.go:

func InitializeService() *UserServiceImpl {
	db := initialize.InitDB()
	userDal := dal.NewUserDal(db)
	userRepo := persistence.NewUserRepo(userDal)
	salt := md5.ProvideSalt()
	encryptManager := md5.NewEncryptManager(salt)
	asymmetricKey := paseto.ProvidePasetoAsymmetricKey()
	implicit := paseto.ProvidePasetoImplicit()
	tokenGenerator := paseto.NewTokenGenerator(asymmetricKey, implicit)
	client := initialize.InitBlob()
	blobManager := sal.NewBlobManager(client)
	cacheCache := cache.NewCache()
	redisManager := cache.NewRedisManager(cacheCache)
	userApplicationService := app.NewUserApplicationService(userRepo, encryptManager, tokenGenerator, blobManager, redisManager)
	userServiceImpl := NewUserServiceImpl(userApplicationService)
	return userServiceImpl
}
