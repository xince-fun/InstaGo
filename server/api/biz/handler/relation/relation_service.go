// Code generated by hertz generator.

package relation

import (
	"context"
	"github.com/xince-fun/InstaGo/server/api/pkg/initialize/rpc"
	"github.com/xince-fun/InstaGo/server/shared/consts"
	"github.com/xince-fun/InstaGo/server/shared/errno"
	krelation "github.com/xince-fun/InstaGo/server/shared/kitex_gen/relation"
	"github.com/xince-fun/InstaGo/server/shared/utils"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	relation "github.com/xince-fun/InstaGo/server/api/biz/model/relation"
)

// Follow .
// @router /api/v1/relation/follow [POST]
func Follow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowRequest

	resp := new(krelation.FollowResponse)
	if err = c.BindAndValidate(&req); err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ParamsErr)
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	resp, err = rpc.Follow(ctx, &krelation.FollowRequest{
		FollowerId: c.MustGet(consts.UserID).(string),
		FolloweeId: req.FolloweeID,
	})
	if err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ServiceErr)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(http.StatusOK, resp)
}

// Unfollow .
// @router /api/v1/relation/unfollow [POST]
func Unfollow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.UnfollowRequest

	resp := new(krelation.UnfollowResponse)
	if err = c.BindAndValidate(&req); err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ParamsErr)
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	resp, err = rpc.Unfollow(ctx, &krelation.UnfollowRequest{
		FollowerId: c.MustGet(consts.UserID).(string),
		FolloweeId: req.FolloweeID,
	})

	if err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ServiceErr)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(http.StatusOK, resp)
}

// GetFolloweeList .
// @router /api/v1/relation/followee/list [GET]
func GetFolloweeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.GetFolloweesRequest

	resp := new(krelation.GetFolloweeListResponse)
	if err = c.BindAndValidate(&req); err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ParamsErr)
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	resp, err = rpc.GetFolloweeList(ctx, &krelation.GetFolloweeListRequest{
		UserId: c.MustGet(consts.UserID).(string),
		Offset: req.Offset,
		Limit:  req.Limit,
	})

	if err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ServiceErr)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(http.StatusOK, resp)
}

// GetFollowerList .
// @router /api/v1/relation/follower/list [GET]
func GetFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.GetFollowersRequest
	resp := new(krelation.GetFollowerListResponse)
	if err = c.BindAndValidate(&req); err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ParamsErr)
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	resp, err = rpc.GetFollowerList(ctx, &krelation.GetFollowerListRequest{
		UserId: c.MustGet(consts.UserID).(string),
		Offset: req.Offset,
		Limit:  req.Limit,
	})
	if err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ServiceErr)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}
	c.JSON(http.StatusOK, resp)
}

// CountFolloweeList .
// @router /api/v1/relation/followee/count [GET]
func CountFolloweeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.CountFolloweesRequest

	resp := new(krelation.CountFolloweeListResponse)
	if err = c.BindAndValidate(&req); err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ParamsErr)
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	resp, err = rpc.CountFollowee(ctx, &krelation.CountFolloweeListRequest{
		UserId: c.MustGet(consts.UserID).(string),
	})
	if err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ServiceErr)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(http.StatusOK, resp)
}

// CountFollowerList .
// @router /api/v1/relation/follower/count [GET]
func CountFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.CountFollowersRequest

	resp := new(krelation.CountFollowerListResponse)
	if err = c.BindAndValidate(&req); err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ParamsErr)
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	resp, err = rpc.CountFollower(ctx, &krelation.CountFollowerListRequest{
		UserId: c.MustGet(consts.UserID).(string),
	})
	if err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ServiceErr)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(http.StatusOK, resp)
}

// IsFollow .
// @router /api/v1/relation/is_follow [GET]
func IsFollow(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.IsFollowRequest

	resp := new(krelation.IsFollowResponse)
	if err = c.BindAndValidate(&req); err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ParamsErr)
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	resp, err = rpc.IsFollow(ctx, &krelation.IsFollowRequest{
		FollowerId: c.MustGet(consts.UserID).(string),
		FolloweeId: req.FolloweeID,
	})

	if err != nil {
		resp.BaseResp = utils.BuildBaseResp(errno.ServiceErr)
		c.JSON(http.StatusInternalServerError, resp)
		return
	}

	c.JSON(http.StatusOK, resp)
}
