// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package errno

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Err int64

const (
	Err_Success        Err = 0
	Err_BadRequest     Err = 10000
	Err_ParamsErr      Err = 10002
	Err_ServiceErr     Err = 20000
	Err_UserDBErr      Err = 30000
	Err_UserSrvErr     Err = 30001
	Err_UserPwdErr     Err = 30002
	Err_UserPwdSameErr Err = 30003
	Err_BlobSrvErr     Err = 40000
	Err_RecordNotFound Err = 80000
	Err_RecordExist    Err = 80001
	Err_InvalidDate    Err = 90001
)

func (p Err) String() string {
	switch p {
	case Err_Success:
		return "Success"
	case Err_BadRequest:
		return "BadRequest"
	case Err_ParamsErr:
		return "ParamsErr"
	case Err_ServiceErr:
		return "ServiceErr"
	case Err_UserDBErr:
		return "UserDBErr"
	case Err_UserSrvErr:
		return "UserSrvErr"
	case Err_UserPwdErr:
		return "UserPwdErr"
	case Err_UserPwdSameErr:
		return "UserPwdSameErr"
	case Err_BlobSrvErr:
		return "BlobSrvErr"
	case Err_RecordNotFound:
		return "RecordNotFound"
	case Err_RecordExist:
		return "RecordExist"
	case Err_InvalidDate:
		return "InvalidDate"
	}
	return "<UNSET>"
}

func ErrFromString(s string) (Err, error) {
	switch s {
	case "Success":
		return Err_Success, nil
	case "BadRequest":
		return Err_BadRequest, nil
	case "ParamsErr":
		return Err_ParamsErr, nil
	case "ServiceErr":
		return Err_ServiceErr, nil
	case "UserDBErr":
		return Err_UserDBErr, nil
	case "UserSrvErr":
		return Err_UserSrvErr, nil
	case "UserPwdErr":
		return Err_UserPwdErr, nil
	case "UserPwdSameErr":
		return Err_UserPwdSameErr, nil
	case "BlobSrvErr":
		return Err_BlobSrvErr, nil
	case "RecordNotFound":
		return Err_RecordNotFound, nil
	case "RecordExist":
		return Err_RecordExist, nil
	case "InvalidDate":
		return Err_InvalidDate, nil
	}
	return Err(0), fmt.Errorf("not a valid Err string")
}

func ErrPtr(v Err) *Err { return &v }
func (p *Err) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Err(result.Int64)
	return
}

func (p *Err) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}
