// Code generated by Kitex v0.9.1. DO NOT EDIT.

package blobservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	blob "github.com/xince-fun/InstaGo/server/shared/kitex_gen/blob"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GeneratePutPreSignedUrl": kitex.NewMethodInfo(
		generatePutPreSignedUrlHandler,
		newBlobServiceGeneratePutPreSignedUrlArgs,
		newBlobServiceGeneratePutPreSignedUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GenerateGetPreSignedUrl": kitex.NewMethodInfo(
		generateGetPreSignedUrlHandler,
		newBlobServiceGenerateGetPreSignedUrlArgs,
		newBlobServiceGenerateGetPreSignedUrlResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"NotifyBlobUpload": kitex.NewMethodInfo(
		notifyBlobUploadHandler,
		newBlobServiceNotifyBlobUploadArgs,
		newBlobServiceNotifyBlobUploadResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	blobServiceServiceInfo                = NewServiceInfo()
	blobServiceServiceInfoForClient       = NewServiceInfoForClient()
	blobServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return blobServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return blobServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return blobServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "BlobService"
	handlerType := (*blob.BlobService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "blob",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func generatePutPreSignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*blob.BlobServiceGeneratePutPreSignedUrlArgs)
	realResult := result.(*blob.BlobServiceGeneratePutPreSignedUrlResult)
	success, err := handler.(blob.BlobService).GeneratePutPreSignedUrl(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBlobServiceGeneratePutPreSignedUrlArgs() interface{} {
	return blob.NewBlobServiceGeneratePutPreSignedUrlArgs()
}

func newBlobServiceGeneratePutPreSignedUrlResult() interface{} {
	return blob.NewBlobServiceGeneratePutPreSignedUrlResult()
}

func generateGetPreSignedUrlHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*blob.BlobServiceGenerateGetPreSignedUrlArgs)
	realResult := result.(*blob.BlobServiceGenerateGetPreSignedUrlResult)
	success, err := handler.(blob.BlobService).GenerateGetPreSignedUrl(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBlobServiceGenerateGetPreSignedUrlArgs() interface{} {
	return blob.NewBlobServiceGenerateGetPreSignedUrlArgs()
}

func newBlobServiceGenerateGetPreSignedUrlResult() interface{} {
	return blob.NewBlobServiceGenerateGetPreSignedUrlResult()
}

func notifyBlobUploadHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*blob.BlobServiceNotifyBlobUploadArgs)
	realResult := result.(*blob.BlobServiceNotifyBlobUploadResult)
	success, err := handler.(blob.BlobService).NotifyBlobUpload(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBlobServiceNotifyBlobUploadArgs() interface{} {
	return blob.NewBlobServiceNotifyBlobUploadArgs()
}

func newBlobServiceNotifyBlobUploadResult() interface{} {
	return blob.NewBlobServiceNotifyBlobUploadResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GeneratePutPreSignedUrl(ctx context.Context, req *blob.GeneratePutPreSignedUrlRequest) (r *blob.GeneratePutPreSignedUrlResponse, err error) {
	var _args blob.BlobServiceGeneratePutPreSignedUrlArgs
	_args.Req = req
	var _result blob.BlobServiceGeneratePutPreSignedUrlResult
	if err = p.c.Call(ctx, "GeneratePutPreSignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GenerateGetPreSignedUrl(ctx context.Context, req *blob.GenerateGetPreSignedUrlRequest) (r *blob.GenerateGetPreSignedUrlResponse, err error) {
	var _args blob.BlobServiceGenerateGetPreSignedUrlArgs
	_args.Req = req
	var _result blob.BlobServiceGenerateGetPreSignedUrlResult
	if err = p.c.Call(ctx, "GenerateGetPreSignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) NotifyBlobUpload(ctx context.Context, req *blob.NotifyBlobUploadRequest) (r *blob.NotifyBlobUploadResponse, err error) {
	var _args blob.BlobServiceNotifyBlobUploadArgs
	_args.Req = req
	var _result blob.BlobServiceNotifyBlobUploadResult
	if err = p.c.Call(ctx, "NotifyBlobUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
