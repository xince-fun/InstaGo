// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package blob

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type GeneratePutPreSignedUrlRequest struct {
	UserId   string `thrift:"user_id,1" frugal:"1,default,string" json:"user_id"`
	BlobType int8   `thrift:"blob_type,2" frugal:"2,default,i8" json:"blob_type"`
	Timeout  int32  `thrift:"timeout,3" frugal:"3,default,i32" json:"timeout"`
}

func NewGeneratePutPreSignedUrlRequest() *GeneratePutPreSignedUrlRequest {
	return &GeneratePutPreSignedUrlRequest{}
}

func (p *GeneratePutPreSignedUrlRequest) InitDefault() {
	*p = GeneratePutPreSignedUrlRequest{}
}

func (p *GeneratePutPreSignedUrlRequest) GetUserId() (v string) {
	return p.UserId
}

func (p *GeneratePutPreSignedUrlRequest) GetBlobType() (v int8) {
	return p.BlobType
}

func (p *GeneratePutPreSignedUrlRequest) GetTimeout() (v int32) {
	return p.Timeout
}
func (p *GeneratePutPreSignedUrlRequest) SetUserId(val string) {
	p.UserId = val
}
func (p *GeneratePutPreSignedUrlRequest) SetBlobType(val int8) {
	p.BlobType = val
}
func (p *GeneratePutPreSignedUrlRequest) SetTimeout(val int32) {
	p.Timeout = val
}

var fieldIDToName_GeneratePutPreSignedUrlRequest = map[int16]string{
	1: "user_id",
	2: "blob_type",
	3: "timeout",
}

func (p *GeneratePutPreSignedUrlRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneratePutPreSignedUrlRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *GeneratePutPreSignedUrlRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BlobType = _field
	return nil
}
func (p *GeneratePutPreSignedUrlRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Timeout = _field
	return nil
}

func (p *GeneratePutPreSignedUrlRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GeneratePutPreSignedUrlRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("blob_type", thrift.BYTE, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.BlobType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timeout", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Timeout); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneratePutPreSignedUrlRequest(%+v)", *p)

}

func (p *GeneratePutPreSignedUrlRequest) DeepEqual(ano *GeneratePutPreSignedUrlRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.BlobType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Timeout) {
		return false
	}
	return true
}

func (p *GeneratePutPreSignedUrlRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *GeneratePutPreSignedUrlRequest) Field2DeepEqual(src int8) bool {

	if p.BlobType != src {
		return false
	}
	return true
}
func (p *GeneratePutPreSignedUrlRequest) Field3DeepEqual(src int32) bool {

	if p.Timeout != src {
		return false
	}
	return true
}

type GeneratePutPreSignedUrlResponse struct {
	Url        string `thrift:"url,1" frugal:"1,default,string" json:"url"`
	Id         string `thrift:"id,2" frugal:"2,default,string" json:"id"`
	ObjectName string `thrift:"object_name,3" frugal:"3,default,string" json:"object_name"`
}

func NewGeneratePutPreSignedUrlResponse() *GeneratePutPreSignedUrlResponse {
	return &GeneratePutPreSignedUrlResponse{}
}

func (p *GeneratePutPreSignedUrlResponse) InitDefault() {
	*p = GeneratePutPreSignedUrlResponse{}
}

func (p *GeneratePutPreSignedUrlResponse) GetUrl() (v string) {
	return p.Url
}

func (p *GeneratePutPreSignedUrlResponse) GetId() (v string) {
	return p.Id
}

func (p *GeneratePutPreSignedUrlResponse) GetObjectName() (v string) {
	return p.ObjectName
}
func (p *GeneratePutPreSignedUrlResponse) SetUrl(val string) {
	p.Url = val
}
func (p *GeneratePutPreSignedUrlResponse) SetId(val string) {
	p.Id = val
}
func (p *GeneratePutPreSignedUrlResponse) SetObjectName(val string) {
	p.ObjectName = val
}

var fieldIDToName_GeneratePutPreSignedUrlResponse = map[int16]string{
	1: "url",
	2: "id",
	3: "object_name",
}

func (p *GeneratePutPreSignedUrlResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GeneratePutPreSignedUrlResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}
func (p *GeneratePutPreSignedUrlResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *GeneratePutPreSignedUrlResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ObjectName = _field
	return nil
}

func (p *GeneratePutPreSignedUrlResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GeneratePutPreSignedUrlResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("object_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ObjectName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GeneratePutPreSignedUrlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GeneratePutPreSignedUrlResponse(%+v)", *p)

}

func (p *GeneratePutPreSignedUrlResponse) DeepEqual(ano *GeneratePutPreSignedUrlResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Url) {
		return false
	}
	if !p.Field2DeepEqual(ano.Id) {
		return false
	}
	if !p.Field3DeepEqual(ano.ObjectName) {
		return false
	}
	return true
}

func (p *GeneratePutPreSignedUrlResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}
func (p *GeneratePutPreSignedUrlResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Id, src) != 0 {
		return false
	}
	return true
}
func (p *GeneratePutPreSignedUrlResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ObjectName, src) != 0 {
		return false
	}
	return true
}

type GenerateGetPreSignedUrlRequest struct {
	BlobId  string `thrift:"blob_id,1" frugal:"1,default,string" json:"blob_id"`
	Timeout int32  `thrift:"timeout,2" frugal:"2,default,i32" json:"timeout"`
}

func NewGenerateGetPreSignedUrlRequest() *GenerateGetPreSignedUrlRequest {
	return &GenerateGetPreSignedUrlRequest{}
}

func (p *GenerateGetPreSignedUrlRequest) InitDefault() {
	*p = GenerateGetPreSignedUrlRequest{}
}

func (p *GenerateGetPreSignedUrlRequest) GetBlobId() (v string) {
	return p.BlobId
}

func (p *GenerateGetPreSignedUrlRequest) GetTimeout() (v int32) {
	return p.Timeout
}
func (p *GenerateGetPreSignedUrlRequest) SetBlobId(val string) {
	p.BlobId = val
}
func (p *GenerateGetPreSignedUrlRequest) SetTimeout(val int32) {
	p.Timeout = val
}

var fieldIDToName_GenerateGetPreSignedUrlRequest = map[int16]string{
	1: "blob_id",
	2: "timeout",
}

func (p *GenerateGetPreSignedUrlRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenerateGetPreSignedUrlRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenerateGetPreSignedUrlRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BlobId = _field
	return nil
}
func (p *GenerateGetPreSignedUrlRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Timeout = _field
	return nil
}

func (p *GenerateGetPreSignedUrlRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateGetPreSignedUrlRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenerateGetPreSignedUrlRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("blob_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BlobId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GenerateGetPreSignedUrlRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("timeout", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Timeout); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenerateGetPreSignedUrlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenerateGetPreSignedUrlRequest(%+v)", *p)

}

func (p *GenerateGetPreSignedUrlRequest) DeepEqual(ano *GenerateGetPreSignedUrlRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BlobId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Timeout) {
		return false
	}
	return true
}

func (p *GenerateGetPreSignedUrlRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BlobId, src) != 0 {
		return false
	}
	return true
}
func (p *GenerateGetPreSignedUrlRequest) Field2DeepEqual(src int32) bool {

	if p.Timeout != src {
		return false
	}
	return true
}

type GenerateGetPreSignedUrlResponse struct {
	Url string `thrift:"url,2" frugal:"2,default,string" json:"url"`
}

func NewGenerateGetPreSignedUrlResponse() *GenerateGetPreSignedUrlResponse {
	return &GenerateGetPreSignedUrlResponse{}
}

func (p *GenerateGetPreSignedUrlResponse) InitDefault() {
	*p = GenerateGetPreSignedUrlResponse{}
}

func (p *GenerateGetPreSignedUrlResponse) GetUrl() (v string) {
	return p.Url
}
func (p *GenerateGetPreSignedUrlResponse) SetUrl(val string) {
	p.Url = val
}

var fieldIDToName_GenerateGetPreSignedUrlResponse = map[int16]string{
	2: "url",
}

func (p *GenerateGetPreSignedUrlResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GenerateGetPreSignedUrlResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GenerateGetPreSignedUrlResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Url = _field
	return nil
}

func (p *GenerateGetPreSignedUrlResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateGetPreSignedUrlResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GenerateGetPreSignedUrlResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Url); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GenerateGetPreSignedUrlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GenerateGetPreSignedUrlResponse(%+v)", *p)

}

func (p *GenerateGetPreSignedUrlResponse) DeepEqual(ano *GenerateGetPreSignedUrlResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Url) {
		return false
	}
	return true
}

func (p *GenerateGetPreSignedUrlResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Url, src) != 0 {
		return false
	}
	return true
}

type NotifyBlobUploadRequest struct {
	BlobId     string `thrift:"blob_id,1" frugal:"1,default,string" json:"blob_id"`
	UserId     string `thrift:"user_id,2" frugal:"2,default,string" json:"user_id"`
	ObjectName string `thrift:"object_name,3" frugal:"3,default,string" json:"object_name"`
	BlobType   int8   `thrift:"blob_type,4" frugal:"4,default,i8" json:"blob_type"`
}

func NewNotifyBlobUploadRequest() *NotifyBlobUploadRequest {
	return &NotifyBlobUploadRequest{}
}

func (p *NotifyBlobUploadRequest) InitDefault() {
	*p = NotifyBlobUploadRequest{}
}

func (p *NotifyBlobUploadRequest) GetBlobId() (v string) {
	return p.BlobId
}

func (p *NotifyBlobUploadRequest) GetUserId() (v string) {
	return p.UserId
}

func (p *NotifyBlobUploadRequest) GetObjectName() (v string) {
	return p.ObjectName
}

func (p *NotifyBlobUploadRequest) GetBlobType() (v int8) {
	return p.BlobType
}
func (p *NotifyBlobUploadRequest) SetBlobId(val string) {
	p.BlobId = val
}
func (p *NotifyBlobUploadRequest) SetUserId(val string) {
	p.UserId = val
}
func (p *NotifyBlobUploadRequest) SetObjectName(val string) {
	p.ObjectName = val
}
func (p *NotifyBlobUploadRequest) SetBlobType(val int8) {
	p.BlobType = val
}

var fieldIDToName_NotifyBlobUploadRequest = map[int16]string{
	1: "blob_id",
	2: "user_id",
	3: "object_name",
	4: "blob_type",
}

func (p *NotifyBlobUploadRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NotifyBlobUploadRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NotifyBlobUploadRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BlobId = _field
	return nil
}
func (p *NotifyBlobUploadRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.UserId = _field
	return nil
}
func (p *NotifyBlobUploadRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ObjectName = _field
	return nil
}
func (p *NotifyBlobUploadRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int8
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		_field = v
	}
	p.BlobType = _field
	return nil
}

func (p *NotifyBlobUploadRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NotifyBlobUploadRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NotifyBlobUploadRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("blob_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.BlobId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NotifyBlobUploadRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NotifyBlobUploadRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("object_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ObjectName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NotifyBlobUploadRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("blob_type", thrift.BYTE, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.BlobType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NotifyBlobUploadRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyBlobUploadRequest(%+v)", *p)

}

func (p *NotifyBlobUploadRequest) DeepEqual(ano *NotifyBlobUploadRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BlobId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ObjectName) {
		return false
	}
	if !p.Field4DeepEqual(ano.BlobType) {
		return false
	}
	return true
}

func (p *NotifyBlobUploadRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.BlobId, src) != 0 {
		return false
	}
	return true
}
func (p *NotifyBlobUploadRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *NotifyBlobUploadRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ObjectName, src) != 0 {
		return false
	}
	return true
}
func (p *NotifyBlobUploadRequest) Field4DeepEqual(src int8) bool {

	if p.BlobType != src {
		return false
	}
	return true
}

type NotifyBlobUploadResponse struct {
}

func NewNotifyBlobUploadResponse() *NotifyBlobUploadResponse {
	return &NotifyBlobUploadResponse{}
}

func (p *NotifyBlobUploadResponse) InitDefault() {
	*p = NotifyBlobUploadResponse{}
}

var fieldIDToName_NotifyBlobUploadResponse = map[int16]string{}

func (p *NotifyBlobUploadResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NotifyBlobUploadResponse) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("NotifyBlobUploadResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NotifyBlobUploadResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyBlobUploadResponse(%+v)", *p)

}

func (p *NotifyBlobUploadResponse) DeepEqual(ano *NotifyBlobUploadResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type BlobService interface {
	GeneratePutPreSignedUrl(ctx context.Context, req *GeneratePutPreSignedUrlRequest) (r *GeneratePutPreSignedUrlResponse, err error)

	GenerateGetPreSignedUrl(ctx context.Context, req *GenerateGetPreSignedUrlRequest) (r *GenerateGetPreSignedUrlResponse, err error)

	NotifyBlobUpload(ctx context.Context, req *NotifyBlobUploadRequest) (r *NotifyBlobUploadResponse, err error)
}

type BlobServiceClient struct {
	c thrift.TClient
}

func NewBlobServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BlobServiceClient {
	return &BlobServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBlobServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BlobServiceClient {
	return &BlobServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBlobServiceClient(c thrift.TClient) *BlobServiceClient {
	return &BlobServiceClient{
		c: c,
	}
}

func (p *BlobServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *BlobServiceClient) GeneratePutPreSignedUrl(ctx context.Context, req *GeneratePutPreSignedUrlRequest) (r *GeneratePutPreSignedUrlResponse, err error) {
	var _args BlobServiceGeneratePutPreSignedUrlArgs
	_args.Req = req
	var _result BlobServiceGeneratePutPreSignedUrlResult
	if err = p.Client_().Call(ctx, "GeneratePutPreSignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlobServiceClient) GenerateGetPreSignedUrl(ctx context.Context, req *GenerateGetPreSignedUrlRequest) (r *GenerateGetPreSignedUrlResponse, err error) {
	var _args BlobServiceGenerateGetPreSignedUrlArgs
	_args.Req = req
	var _result BlobServiceGenerateGetPreSignedUrlResult
	if err = p.Client_().Call(ctx, "GenerateGetPreSignedUrl", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BlobServiceClient) NotifyBlobUpload(ctx context.Context, req *NotifyBlobUploadRequest) (r *NotifyBlobUploadResponse, err error) {
	var _args BlobServiceNotifyBlobUploadArgs
	_args.Req = req
	var _result BlobServiceNotifyBlobUploadResult
	if err = p.Client_().Call(ctx, "NotifyBlobUpload", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type BlobServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BlobService
}

func (p *BlobServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BlobServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BlobServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBlobServiceProcessor(handler BlobService) *BlobServiceProcessor {
	self := &BlobServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("GeneratePutPreSignedUrl", &blobServiceProcessorGeneratePutPreSignedUrl{handler: handler})
	self.AddToProcessorMap("GenerateGetPreSignedUrl", &blobServiceProcessorGenerateGetPreSignedUrl{handler: handler})
	self.AddToProcessorMap("NotifyBlobUpload", &blobServiceProcessorNotifyBlobUpload{handler: handler})
	return self
}
func (p *BlobServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type blobServiceProcessorGeneratePutPreSignedUrl struct {
	handler BlobService
}

func (p *blobServiceProcessorGeneratePutPreSignedUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlobServiceGeneratePutPreSignedUrlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GeneratePutPreSignedUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlobServiceGeneratePutPreSignedUrlResult{}
	var retval *GeneratePutPreSignedUrlResponse
	if retval, err2 = p.handler.GeneratePutPreSignedUrl(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GeneratePutPreSignedUrl: "+err2.Error())
		oprot.WriteMessageBegin("GeneratePutPreSignedUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GeneratePutPreSignedUrl", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blobServiceProcessorGenerateGetPreSignedUrl struct {
	handler BlobService
}

func (p *blobServiceProcessorGenerateGetPreSignedUrl) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlobServiceGenerateGetPreSignedUrlArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GenerateGetPreSignedUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlobServiceGenerateGetPreSignedUrlResult{}
	var retval *GenerateGetPreSignedUrlResponse
	if retval, err2 = p.handler.GenerateGetPreSignedUrl(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GenerateGetPreSignedUrl: "+err2.Error())
		oprot.WriteMessageBegin("GenerateGetPreSignedUrl", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GenerateGetPreSignedUrl", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type blobServiceProcessorNotifyBlobUpload struct {
	handler BlobService
}

func (p *blobServiceProcessorNotifyBlobUpload) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BlobServiceNotifyBlobUploadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("NotifyBlobUpload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BlobServiceNotifyBlobUploadResult{}
	var retval *NotifyBlobUploadResponse
	if retval, err2 = p.handler.NotifyBlobUpload(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing NotifyBlobUpload: "+err2.Error())
		oprot.WriteMessageBegin("NotifyBlobUpload", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("NotifyBlobUpload", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BlobServiceGeneratePutPreSignedUrlArgs struct {
	Req *GeneratePutPreSignedUrlRequest `thrift:"req,1" frugal:"1,default,GeneratePutPreSignedUrlRequest" json:"req"`
}

func NewBlobServiceGeneratePutPreSignedUrlArgs() *BlobServiceGeneratePutPreSignedUrlArgs {
	return &BlobServiceGeneratePutPreSignedUrlArgs{}
}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) InitDefault() {
	*p = BlobServiceGeneratePutPreSignedUrlArgs{}
}

var BlobServiceGeneratePutPreSignedUrlArgs_Req_DEFAULT *GeneratePutPreSignedUrlRequest

func (p *BlobServiceGeneratePutPreSignedUrlArgs) GetReq() (v *GeneratePutPreSignedUrlRequest) {
	if !p.IsSetReq() {
		return BlobServiceGeneratePutPreSignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BlobServiceGeneratePutPreSignedUrlArgs) SetReq(val *GeneratePutPreSignedUrlRequest) {
	p.Req = val
}

var fieldIDToName_BlobServiceGeneratePutPreSignedUrlArgs = map[int16]string{
	1: "req",
}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlobServiceGeneratePutPreSignedUrlArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGeneratePutPreSignedUrlRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GeneratePutPreSignedUrl_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlobServiceGeneratePutPreSignedUrlArgs(%+v)", *p)

}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) DeepEqual(ano *BlobServiceGeneratePutPreSignedUrlArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BlobServiceGeneratePutPreSignedUrlArgs) Field1DeepEqual(src *GeneratePutPreSignedUrlRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BlobServiceGeneratePutPreSignedUrlResult struct {
	Success *GeneratePutPreSignedUrlResponse `thrift:"success,0,optional" frugal:"0,optional,GeneratePutPreSignedUrlResponse" json:"success,omitempty"`
}

func NewBlobServiceGeneratePutPreSignedUrlResult() *BlobServiceGeneratePutPreSignedUrlResult {
	return &BlobServiceGeneratePutPreSignedUrlResult{}
}

func (p *BlobServiceGeneratePutPreSignedUrlResult) InitDefault() {
	*p = BlobServiceGeneratePutPreSignedUrlResult{}
}

var BlobServiceGeneratePutPreSignedUrlResult_Success_DEFAULT *GeneratePutPreSignedUrlResponse

func (p *BlobServiceGeneratePutPreSignedUrlResult) GetSuccess() (v *GeneratePutPreSignedUrlResponse) {
	if !p.IsSetSuccess() {
		return BlobServiceGeneratePutPreSignedUrlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BlobServiceGeneratePutPreSignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*GeneratePutPreSignedUrlResponse)
}

var fieldIDToName_BlobServiceGeneratePutPreSignedUrlResult = map[int16]string{
	0: "success",
}

func (p *BlobServiceGeneratePutPreSignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlobServiceGeneratePutPreSignedUrlResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlobServiceGeneratePutPreSignedUrlResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlobServiceGeneratePutPreSignedUrlResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGeneratePutPreSignedUrlResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BlobServiceGeneratePutPreSignedUrlResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GeneratePutPreSignedUrl_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlobServiceGeneratePutPreSignedUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlobServiceGeneratePutPreSignedUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlobServiceGeneratePutPreSignedUrlResult(%+v)", *p)

}

func (p *BlobServiceGeneratePutPreSignedUrlResult) DeepEqual(ano *BlobServiceGeneratePutPreSignedUrlResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BlobServiceGeneratePutPreSignedUrlResult) Field0DeepEqual(src *GeneratePutPreSignedUrlResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BlobServiceGenerateGetPreSignedUrlArgs struct {
	Req *GenerateGetPreSignedUrlRequest `thrift:"req,1" frugal:"1,default,GenerateGetPreSignedUrlRequest" json:"req"`
}

func NewBlobServiceGenerateGetPreSignedUrlArgs() *BlobServiceGenerateGetPreSignedUrlArgs {
	return &BlobServiceGenerateGetPreSignedUrlArgs{}
}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) InitDefault() {
	*p = BlobServiceGenerateGetPreSignedUrlArgs{}
}

var BlobServiceGenerateGetPreSignedUrlArgs_Req_DEFAULT *GenerateGetPreSignedUrlRequest

func (p *BlobServiceGenerateGetPreSignedUrlArgs) GetReq() (v *GenerateGetPreSignedUrlRequest) {
	if !p.IsSetReq() {
		return BlobServiceGenerateGetPreSignedUrlArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BlobServiceGenerateGetPreSignedUrlArgs) SetReq(val *GenerateGetPreSignedUrlRequest) {
	p.Req = val
}

var fieldIDToName_BlobServiceGenerateGetPreSignedUrlArgs = map[int16]string{
	1: "req",
}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlobServiceGenerateGetPreSignedUrlArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGenerateGetPreSignedUrlRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateGetPreSignedUrl_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlobServiceGenerateGetPreSignedUrlArgs(%+v)", *p)

}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) DeepEqual(ano *BlobServiceGenerateGetPreSignedUrlArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BlobServiceGenerateGetPreSignedUrlArgs) Field1DeepEqual(src *GenerateGetPreSignedUrlRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BlobServiceGenerateGetPreSignedUrlResult struct {
	Success *GenerateGetPreSignedUrlResponse `thrift:"success,0,optional" frugal:"0,optional,GenerateGetPreSignedUrlResponse" json:"success,omitempty"`
}

func NewBlobServiceGenerateGetPreSignedUrlResult() *BlobServiceGenerateGetPreSignedUrlResult {
	return &BlobServiceGenerateGetPreSignedUrlResult{}
}

func (p *BlobServiceGenerateGetPreSignedUrlResult) InitDefault() {
	*p = BlobServiceGenerateGetPreSignedUrlResult{}
}

var BlobServiceGenerateGetPreSignedUrlResult_Success_DEFAULT *GenerateGetPreSignedUrlResponse

func (p *BlobServiceGenerateGetPreSignedUrlResult) GetSuccess() (v *GenerateGetPreSignedUrlResponse) {
	if !p.IsSetSuccess() {
		return BlobServiceGenerateGetPreSignedUrlResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BlobServiceGenerateGetPreSignedUrlResult) SetSuccess(x interface{}) {
	p.Success = x.(*GenerateGetPreSignedUrlResponse)
}

var fieldIDToName_BlobServiceGenerateGetPreSignedUrlResult = map[int16]string{
	0: "success",
}

func (p *BlobServiceGenerateGetPreSignedUrlResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlobServiceGenerateGetPreSignedUrlResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlobServiceGenerateGetPreSignedUrlResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlobServiceGenerateGetPreSignedUrlResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGenerateGetPreSignedUrlResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BlobServiceGenerateGetPreSignedUrlResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GenerateGetPreSignedUrl_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlobServiceGenerateGetPreSignedUrlResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlobServiceGenerateGetPreSignedUrlResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlobServiceGenerateGetPreSignedUrlResult(%+v)", *p)

}

func (p *BlobServiceGenerateGetPreSignedUrlResult) DeepEqual(ano *BlobServiceGenerateGetPreSignedUrlResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BlobServiceGenerateGetPreSignedUrlResult) Field0DeepEqual(src *GenerateGetPreSignedUrlResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BlobServiceNotifyBlobUploadArgs struct {
	Req *NotifyBlobUploadRequest `thrift:"req,1" frugal:"1,default,NotifyBlobUploadRequest" json:"req"`
}

func NewBlobServiceNotifyBlobUploadArgs() *BlobServiceNotifyBlobUploadArgs {
	return &BlobServiceNotifyBlobUploadArgs{}
}

func (p *BlobServiceNotifyBlobUploadArgs) InitDefault() {
	*p = BlobServiceNotifyBlobUploadArgs{}
}

var BlobServiceNotifyBlobUploadArgs_Req_DEFAULT *NotifyBlobUploadRequest

func (p *BlobServiceNotifyBlobUploadArgs) GetReq() (v *NotifyBlobUploadRequest) {
	if !p.IsSetReq() {
		return BlobServiceNotifyBlobUploadArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BlobServiceNotifyBlobUploadArgs) SetReq(val *NotifyBlobUploadRequest) {
	p.Req = val
}

var fieldIDToName_BlobServiceNotifyBlobUploadArgs = map[int16]string{
	1: "req",
}

func (p *BlobServiceNotifyBlobUploadArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BlobServiceNotifyBlobUploadArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlobServiceNotifyBlobUploadArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlobServiceNotifyBlobUploadArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewNotifyBlobUploadRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *BlobServiceNotifyBlobUploadArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NotifyBlobUpload_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlobServiceNotifyBlobUploadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BlobServiceNotifyBlobUploadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlobServiceNotifyBlobUploadArgs(%+v)", *p)

}

func (p *BlobServiceNotifyBlobUploadArgs) DeepEqual(ano *BlobServiceNotifyBlobUploadArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BlobServiceNotifyBlobUploadArgs) Field1DeepEqual(src *NotifyBlobUploadRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BlobServiceNotifyBlobUploadResult struct {
	Success *NotifyBlobUploadResponse `thrift:"success,0,optional" frugal:"0,optional,NotifyBlobUploadResponse" json:"success,omitempty"`
}

func NewBlobServiceNotifyBlobUploadResult() *BlobServiceNotifyBlobUploadResult {
	return &BlobServiceNotifyBlobUploadResult{}
}

func (p *BlobServiceNotifyBlobUploadResult) InitDefault() {
	*p = BlobServiceNotifyBlobUploadResult{}
}

var BlobServiceNotifyBlobUploadResult_Success_DEFAULT *NotifyBlobUploadResponse

func (p *BlobServiceNotifyBlobUploadResult) GetSuccess() (v *NotifyBlobUploadResponse) {
	if !p.IsSetSuccess() {
		return BlobServiceNotifyBlobUploadResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BlobServiceNotifyBlobUploadResult) SetSuccess(x interface{}) {
	p.Success = x.(*NotifyBlobUploadResponse)
}

var fieldIDToName_BlobServiceNotifyBlobUploadResult = map[int16]string{
	0: "success",
}

func (p *BlobServiceNotifyBlobUploadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BlobServiceNotifyBlobUploadResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BlobServiceNotifyBlobUploadResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BlobServiceNotifyBlobUploadResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewNotifyBlobUploadResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *BlobServiceNotifyBlobUploadResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NotifyBlobUpload_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BlobServiceNotifyBlobUploadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BlobServiceNotifyBlobUploadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BlobServiceNotifyBlobUploadResult(%+v)", *p)

}

func (p *BlobServiceNotifyBlobUploadResult) DeepEqual(ano *BlobServiceNotifyBlobUploadResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BlobServiceNotifyBlobUploadResult) Field0DeepEqual(src *NotifyBlobUploadResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
